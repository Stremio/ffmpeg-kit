name: custom android build ndk21

on:
  push:
    branches:
      - older-ndk

env:
  TAG: v5.1.LTS-ndk21

jobs:
  build-custom-android-release:
    name: build on linux
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.tag }}
      - name: detect lts version
        run: |
          if [[ "${{ inputs.tag }}" =~ "LTS" ]]; then
            echo "LTS=true" >> $GITHUB_ENV
          else
            echo "LTS=false" >> $GITHUB_ENV
          fi
      - name: set up adopt jdk 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: prerequisites
        run: sudo apt-get install autoconf automake libtool pkg-config curl git cmake gcc gperf texinfo yasm nasm bison autogen wget autopoint meson ninja-build ragel
      - name: upgrade meson
        run: pip install meson --upgrade
      - name: set up android ndk
        run: |
          curl -s "https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip" -o ndk.zip
          unzip -q -o ndk.zip -d .ndk
          echo "ANDROID_NDK_ROOT=$PWD/.ndk/$(ls .ndk)" >> $GITHUB_ENV
      - name: run the build script for main full package
        if: ${{ env.LTS == 'false' }}
        run: ./android.sh --disable-arm-v7a --enable-android-media-codec --enable-android-zlib --enable-dav1d --enable-fontconfig --enable-freetype --enable-fribidi --enable-gmp --enable-gnutls --enable-kvazaar --enable-lame --enable-libass --enable-libiconv --enable-libilbc --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libwebp --enable-zimg --enable-libxml2 --enable-opencore-amr --enable-opus --enable-shine --enable-snappy --enable-soxr --enable-speex --enable-twolame --enable-vo-amrwbenc
      - name: run the build script for lts full package
        if: ${{ env.LTS == 'true' }}
        run: ./android.sh --lts --enable-android-media-codec --enable-android-zlib --enable-dav1d --enable-fontconfig --enable-freetype --enable-fribidi --enable-gmp --enable-gnutls --enable-kvazaar --enable-lame --enable-libass --enable-libiconv --enable-libilbc --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libwebp --enable-zimg --enable-libxml2 --enable-opencore-amr --enable-opus --enable-shine --enable-snappy --enable-soxr --enable-speex --enable-twolame --enable-vo-amrwbenc
      - name: print build logs
        if: ${{ always() }}
        run: cat build.log
      - name: print ffbuild logs
        if: ${{ failure() }}
        run: '[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log'
      - name: create main full package
        if: ${{ success() && env.LTS == 'false' }}
        run: cd prebuilt;cp bundle-android-aar/ffmpeg-kit/ffmpeg-kit.aar ffmpeg-kit-${{ inputs.tag }}-full-android.aar;cd ..
      - name: create lts full package
        if: ${{ success() && env.LTS == 'true' }}
        run: cd prebuilt;cp bundle-android-aar-lts/ffmpeg-kit/ffmpeg-kit.aar ffmpeg-kit-${{ inputs.tag }}-full-android.aar;cd ..
      - name: run the build script for main full-gpl package
        if: ${{ env.LTS == 'false' }}
        run: ./android.sh --disable-arm-v7a --enable-android-media-codec --enable-android-zlib --enable-dav1d --enable-fontconfig --enable-freetype --enable-fribidi --enable-gmp --enable-gnutls --enable-kvazaar --enable-lame --enable-libass --enable-libiconv --enable-libilbc --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libwebp --enable-zimg --enable-libxml2 --enable-opencore-amr --enable-opus --enable-shine --enable-snappy --enable-soxr --enable-speex --enable-twolame --enable-vo-amrwbenc --enable-gpl --enable-libvidstab --enable-x264 --enable-x265 --enable-xvidcore
      - name: run the build script for lts full-gpl package
        if: ${{ env.LTS == 'true' }}
        run: ./android.sh --lts --enable-android-media-codec --enable-android-zlib --enable-dav1d --enable-fontconfig --enable-freetype --enable-fribidi --enable-gmp --enable-gnutls --enable-kvazaar --enable-lame --enable-libass --enable-libiconv --enable-libilbc --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libwebp --enable-zimg --enable-libxml2 --enable-opencore-amr --enable-opus --enable-shine --enable-snappy --enable-soxr --enable-speex --enable-twolame --enable-vo-amrwbenc --enable-gpl --enable-libvidstab --enable-x264 --enable-x265 --enable-xvidcore
      - name: print build logs
        if: ${{ always() }}
        run: cat build.log
      - name: print ffbuild logs
        if: ${{ failure() }}
        run: '[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log'
      - name: create main full-gpl package
        if: ${{ success() && env.LTS == 'false' }}
        run: cd prebuilt;cp bundle-android-aar/ffmpeg-kit/ffmpeg-kit.aar ffmpeg-kit-${{ inputs.tag }}-full-gpl-android.aar;cd ..;ls -l prebuilt
      - name: create lts full-gpl package
        if: ${{ success() && env.LTS == 'true' }}
        run: cd prebuilt;cp bundle-android-aar-lts/ffmpeg-kit/ffmpeg-kit.aar ffmpeg-kit-${{ inputs.tag }}-full-gpl-android.aar;cd ..;ls -l prebuilt
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ inputs.tag }}
          name: Stremio FFmpeg-Kit ${{ inputs.tag }}
          makeLatest: true
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          artifactErrorsFailBuild: true
          artifacts: "prebuilt/ffmpeg-kit-${{ inputs.tag }}-full-android.aar,prebuilt/ffmpeg-kit-${{ inputs.tag }}-full-gpl-android.aar"
          body: |
            Stremio FFmpeg-Kit Release ${{ inputs.tag }}
